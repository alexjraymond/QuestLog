
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { Button } from "~/component/Button";
import { FormGroup } from "~/component/FormGroup";
import { Input } from "~/component/Input";
import { Toggle } from "~/component/Toggle";
import { useBuyCredits } from "~/hooks/useBuyCredits";
import { api } from "~/utils/api";



const GenerateTask: NextPage = () => {
  const [form, setForm] = useState({
    title: '',  
    description: '',
  })
  const [quest, setQuest] = useState({
    title: '',
    description: '',
  })

  const [task, setTask] = useState({
    title: '',
    description: '',
  })

  const [successMessage, setSuccessMessage] = useState('')

  const session= useSession();

  const isLoggedIn = !!session.data;

  const { buyCredits } = useBuyCredits()

  const generateQuest = api.generate.generateQuest.useMutation({
    onSuccess(data) {
      if (!data.returnedQuest) return;
      // split data into the quest title and description
      const rawQuest = data.returnedQuest
      const questNameMatch = rawQuest.match(/Quest Name:\s*(.+?)\s*Quest Description:/)
      const questDescriptionMatch = rawQuest.match(/Quest Description:\s*(.+)/)
      const questName = questNameMatch ? questNameMatch[1]?.replace(/['"]+/g, '') : '';
      const questDescription = questDescriptionMatch ? questDescriptionMatch[1] : '';
      saveQuestData.mutate({
        title: task.title,
        description: task.description,
        questTitle: questName || '',
        questDescription: questDescription || '',
        userId: session.data?.user.id as string,
      })
      setQuest({
        title: questName || '',
      description: questDescription || '',
    })}
  })

const saveQuestData = api.generate.createQuest.useMutation({
  onSuccess() {
    setSuccessMessage('quest data has been stored successfully!')
  }
})

  function updateForm(key: string) {
    return function(e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>) {
    setForm((prev) =>({
      ...prev, [key]: e.target.value,
    }));
      }
  }

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    // submit form data to backend
    setTask({
      title: form.title,
      description: form.description,
    })
    generateQuest.mutate({
      title: form.title,
      description: form.description
    })
    
    setForm({title: '', description:''})


  }
    

  return (
    <>
      <Head>
        <title>Add a Quest</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main className="flex min-h-screen flex-col items-center">
      

        <form 
        className="flex flex-col gap-4 mt-10 w-full sm:w-3/4 h-full xl:w-1/2"
        onSubmit={handleFormSubmit}
        >
          <FormGroup>
          <p className="prose-xl">Add a Quest</p>
          <Input 
          placeholder='title'
          onChange={updateForm('title')}
          value={form.title}
          />
          <textarea 
          className="block p-2.5 w-full bg-stone-100 resize-none border-b-stone-400 border border-stone-100"
          placeholder='description'
          value={form.description}
          onChange={updateForm('description')}
          />
          <Toggle>Convert to a Quest?</Toggle>
          <div
          className="justify-end flex"
          >
            <Button type="submit">
              Submit
            </Button>
          </div>
          </FormGroup>

            {successMessage && <div className='text-green-500'>{successMessage}</div>}

        </form>
      </main>
    </>
  );
};

export default GenerateTask;

